<single_instance_cd>
  <!-- Safety feature extension through hierarchical state: microwave can't be running while door is open -->
  <delta>1 ms</delta>
  <statechart>
    <semantics
      big_step_maximality="take_many"
      combo_step_maximality="take_one"
      input_event_lifeline="first_combo_step"
      hierarchical_priority="source_parent"
      same_source_priority="explicit"
      />
    <datamodel>
      import GUI;
      time = 0;
      checkStartTime = func {
        if (time == 0) {
          time = 30;
          display_time(time);
        }
      };
    </datamodel>
    <inport name="in">
      <event name="start"/>
      <event name="stop"/>
      <event name="increase_time"/>
      <event name="door_opened"/>
      <event name="door_closed"/>
    </inport>
    <outport name="out">
      <event name="micro_on"/>
      <event name="micro_off"/>
      <event name="bell"/>
    </outport>
    <root initial="DoorClosed">
      <state id="DoorClosed" initial="NotRunning">
        <transition port="in" event="door_opened" target="../DoorOpen"/>
        <state id="Running">
          <onentry> <raise port="out" event="micro_on"/> </onentry>
          <onexit> <raise port="out" event="micro_off"/> </onexit>
          <transition port="in" event="stop" target="../NotRunning"/>
          <state id="Inner">
            <transition after="1 s" target=".">
              <code> time -= 1; display_time(time); </code>
            </transition>
          </state>
          <transition cond="time == 0" target="../NotRunning"/>
          <transition port="in" event="increase_time" target=".">
            <code> time += 10; display_time(time); </code>
          </transition>
        </state>
        <state id="NotRunning">
          <transition port="in" event="start" target="../Running">
            <code> checkStartTime(); </code>
          </transition>
          <transition port="in" event="stop" target=".">
            <code> time = 0; display_time(time); </code>
          </transition>
          <transition port="in" event="increase_time" target=".">
            <code> time += 10; display_time(time); </code>
          </transition>
        </state>
      </state>
      <state id="DoorOpen">
        <transition port="in" event="door_closed" target="../DoorClosed"/>
        <transition port="in" event="increase_time" target=".">
          <code> time += 10; display_time(time); </code>
        </transition>
      </state>
    </root>
  </statechart>
</single_instance_cd>