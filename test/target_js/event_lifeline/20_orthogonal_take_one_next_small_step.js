/* Generated by Statechart compiler by Glenn De Jonghe, Joeri Exelmans, Simon Van Mierlo, and Yentl Van Tendeloo (for the inspiration)

Date:   Tue Aug 09 09:35:51 2016

Model author: Herr Joeri Exelmans
Model name:   orthogonal_take_one_next_small_step
Model description:
Internal event lifeline - Next Small Step-semantics: Events raised in a small step are present only in the next small step of the same big step. It is possible for internally raised events to be "lost": For instance, if in the current big step it is no longer possible for another transition to be executed (due to big-step maximality semantics), there can't be another small step in which internally raised events of the last small step become present; all events raised in the last small step of a big step will never have any effect.

		In combination with 'Take One' semantics (as used in this test), an internally raised event can only be sensed by a transition whose arena is orthogonal to the arena of the transition that caused the event to be raised, with the additional requirement that no transitions were already executed in the arena of the 'sensing' transition in the current big step. This can be counter-intuitive to the modeler. Using 'Take Many' semantics solves this problem (see 'orthogonal_take_many_next_small_step'), at the cost of having the risk of never-ending big steps.*/


// package "orthogonal_take_one_next_small_step"
var orthogonal_take_one_next_small_step = {};
(function() {

var c = function(controller) {
    RuntimeClassBase.call(this, controller);
    
    this.semantics.big_step_maximality = StatechartSemantics.TakeOne;
    this.semantics.internal_event_lifeline = StatechartSemantics.NextSmallStep;
    this.semantics.input_event_lifeline = StatechartSemantics.FirstComboStep;
    this.semantics.priority = StatechartSemantics.SourceParent;
    this.semantics.concurrency = StatechartSemantics.Single;
    
    // build Statechart structure
    this.build_statechart_structure();
    
    // call user defined constructor
    c.prototype.user_defined_constructor.call(this);
};
c.prototype = new Object();
(function() {
    var proto = new RuntimeClassBase();
    for (prop in proto) {
        c.prototype[prop] = proto[prop];
    }
})();

c.prototype.user_defined_constructor = function() {
};

c.prototype.user_defined_destructor = function() {
};


// builds Statechart structure
c.prototype.build_statechart_structure = function() {
    
    // state <root>
    this.states[""] = new State(0, this);
    
    // state /p
    this.states["/p"] = new ParallelState(1, this);
    
    // state /p/o0
    this.states["/p/o0"] = new State(2, this);
    
    // state /p/o0/sa
    this.states["/p/o0/sa"] = new State(3, this);
    this.states["/p/o0/sa"].setEnter(this._p_o0_sa_enter);
    
    // state /p/o0/sb
    this.states["/p/o0/sb"] = new State(4, this);
    this.states["/p/o0/sb"].setEnter(this._p_o0_sb_enter);
    
    // state /p/o1
    this.states["/p/o1"] = new State(5, this);
    
    // state /p/o1/sc
    this.states["/p/o1/sc"] = new State(6, this);
    this.states["/p/o1/sc"].setEnter(this._p_o1_sc_enter);
    
    // state /p/o1/sd
    this.states["/p/o1/sd"] = new State(7, this);
    this.states["/p/o1/sd"].setEnter(this._p_o1_sd_enter);
    
    // state /p/o1/se
    this.states["/p/o1/se"] = new State(8, this);
    this.states["/p/o1/se"].setEnter(this._p_o1_se_enter);
    
    // add children
    this.states[""].addChild(this.states["/p"]);
    this.states["/p"].addChild(this.states["/p/o0"]);
    this.states["/p"].addChild(this.states["/p/o1"]);
    this.states["/p/o0"].addChild(this.states["/p/o0/sa"]);
    this.states["/p/o0"].addChild(this.states["/p/o0/sb"]);
    this.states["/p/o1"].addChild(this.states["/p/o1/sc"]);
    this.states["/p/o1"].addChild(this.states["/p/o1/sd"]);
    this.states["/p/o1"].addChild(this.states["/p/o1/se"]);
    this.states[""].fixTree();
    this.states[""].default_state = this.states["/p"];
    this.states["/p/o0"].default_state = this.states["/p/o0/sa"];
    this.states["/p/o1"].default_state = this.states["/p/o1/sc"];
    
    // transition /p/o0/sa
    var _p_o0_sa_0 = new Transition(this, this.states["/p/o0/sa"], [this.states["/p/o0/sb"]]);
    _p_o0_sa_0.setAction(this._p_o0_sa_0_exec);
    _p_o0_sa_0.setTrigger(new Event("f", null));
    this.states["/p/o0/sa"].addTransition(_p_o0_sa_0);
    
    // transition /p/o0/sb
    var _p_o0_sb_0 = new Transition(this, this.states["/p/o0/sb"], [this.states["/p/o0/sa"]]);
    _p_o0_sb_0.setTrigger(null);
    this.states["/p/o0/sb"].addTransition(_p_o0_sb_0);
    
    // transition /p/o1/sc
    var _p_o1_sc_0 = new Transition(this, this.states["/p/o1/sc"], [this.states["/p/o1/sd"]]);
    _p_o1_sc_0.setAction(this._p_o1_sc_0_exec);
    _p_o1_sc_0.setTrigger(new Event("e", "in"));
    this.states["/p/o1/sc"].addTransition(_p_o1_sc_0);
    
    // transition /p/o1/sd
    var _p_o1_sd_0 = new Transition(this, this.states["/p/o1/sd"], [this.states["/p/o1/se"]]);
    _p_o1_sd_0.setTrigger(new Event("g", null));
    this.states["/p/o1/sd"].addTransition(_p_o1_sd_0);
};

c.prototype._p_o0_sa_enter = function() {
    this.big_step.outputEvent(new Event("entered_sa", "out", new Array()));
};

c.prototype._p_o0_sb_enter = function() {
    this.big_step.outputEvent(new Event("entered_sb", "out", new Array()));
};

c.prototype._p_o1_sc_enter = function() {
    this.big_step.outputEvent(new Event("entered_sc", "out", new Array()));
};

c.prototype._p_o1_sd_enter = function() {
    this.big_step.outputEvent(new Event("entered_sd", "out", new Array()));
};

c.prototype._p_o1_se_enter = function() {
    this.big_step.outputEvent(new Event("entered_se", "out", new Array()));
};

c.prototype._p_o0_sa_0_exec = function(parameters) {
    this.raiseInternalEvent(new Event("g", null, new Array()));
};

c.prototype._p_o1_sc_0_exec = function(parameters) {
    this.raiseInternalEvent(new Event("f", null, new Array()));
};

c.prototype.initializeStatechart = function() {
    // enter default state
    this.default_targets = this.states["/p"].getEffectiveTargetStates();
    RuntimeClassBase.prototype.initializeStatechart.call(this);
};

// add symbol 'c' to package 'orthogonal_take_one_next_small_step'
orthogonal_take_one_next_small_step.c = c;

var ObjectManager = function(controller) {
    ObjectManagerBase.call(this, controller);
};
ObjectManager.prototype = new Object();
(function() {
    var proto = new ObjectManagerBase();
    for (prop in proto) {
        ObjectManager.prototype[prop] = proto[prop];
    }
})();

ObjectManager.prototype.instantiate = function(class_name, construct_params) {
    if (class_name === "c") {
        var instance = new c(this.controller);
        instance.associations = new Object();
    } else  {
        throw new Error("Cannot instantiate class " + class_name);
    }
    return instance;
};

// add symbol 'ObjectManager' to package 'orthogonal_take_one_next_small_step'
orthogonal_take_one_next_small_step.ObjectManager = ObjectManager;

var Controller = function(event_loop_callbacks, finished_callback, behind_schedule_callback) {
    if (finished_callback === undefined) finished_callback = null;
    if (behind_schedule_callback === undefined) behind_schedule_callback = null;
    EventLoopControllerBase.call(this, new ObjectManager(this), event_loop_callbacks, finished_callback, behind_schedule_callback);
    this.addInputPort("in");
    this.addOutputPort("out");
    this.object_manager.createInstance("c", new Array());
};
Controller.prototype = new Object();
(function() {
    var proto = new EventLoopControllerBase();
    for (prop in proto) {
        Controller.prototype[prop] = proto[prop];
    }
})();

// add symbol 'Controller' to package 'orthogonal_take_one_next_small_step'
orthogonal_take_one_next_small_step.Controller = Controller;

var InputEvent = function(name, port, parameters, time_offset) {
    this.name = name;
    this.port = port;
    this.parameters = parameters;
    this.time_offset = time_offset;
};

// add symbol 'InputEvent' to package 'orthogonal_take_one_next_small_step'
orthogonal_take_one_next_small_step.InputEvent = InputEvent;

var Test = function() {
};
Test.prototype.input_events = [new InputEvent("e", "in", new Array(), 0.0)];
Test.prototype.expected_events = [[new Event("entered_sa", "out", new Array()), new Event("entered_sc", "out", new Array())], [new Event("entered_sd", "out", new Array()), new Event("entered_sb", "out", new Array())], [new Event("entered_sa", "out", new Array())]];

// add symbol 'Test' to package 'orthogonal_take_one_next_small_step'
orthogonal_take_one_next_small_step.Test = Test;
})();