/* Generated by Statechart compiler by Glenn De Jonghe, Joeri Exelmans, Simon Van Mierlo, and Yentl Van Tendeloo (for the inspiration)

Date:   Wed Aug 03 16:10:19 2016

Model author: Glenn De Jonghe
Model name:   TestCorrectDuplicateStateId
Model description:
Testing duplicate id's.*/


// package "TestCorrectDuplicateStateId"
var TestCorrectDuplicateStateId = {};
(function() {

var Class1 = function(controller) {
    RuntimeClassBase.call(this, controller);
    
    this.semantics.big_step_maximality = StatechartSemantics.TakeMany;
    this.semantics.internal_event_lifeline = StatechartSemantics.Queue;
    this.semantics.input_event_lifeline = StatechartSemantics.FirstComboStep;
    this.semantics.priority = StatechartSemantics.SourceParent;
    this.semantics.concurrency = StatechartSemantics.Single;
    
    // build Statechart structure
    this.build_statechart_structure();
    
    // call user defined constructor
    Class1.prototype.user_defined_constructor.call(this);
};
Class1.prototype = new Object();
(function() {
    var proto = new RuntimeClassBase();
    for (prop in proto) {
        Class1.prototype[prop] = proto[prop];
    }
})();

Class1.prototype.user_defined_constructor = function() {
};

Class1.prototype.user_defined_destructor = function() {
};


// builds Statechart structure
Class1.prototype.build_statechart_structure = function() {
    
    // state <root>
    this.states[""] = new State(0, this);
    
    // state /state0
    this.states["/state0"] = new State(1, this);
    
    // state /state0/state1
    this.states["/state0/state1"] = new State(2, this);
    
    // state /state0/state0
    this.states["/state0/state0"] = new State(3, this);
    
    // state /state1
    this.states["/state1"] = new State(4, this);
    
    // state /state1/state1
    this.states["/state1/state1"] = new State(5, this);
    
    // state /state1/state0
    this.states["/state1/state0"] = new State(6, this);
    
    // add children
    this.states[""].addChild(this.states["/state0"]);
    this.states[""].addChild(this.states["/state1"]);
    this.states["/state0"].addChild(this.states["/state0/state1"]);
    this.states["/state0"].addChild(this.states["/state0/state0"]);
    this.states["/state1"].addChild(this.states["/state1/state1"]);
    this.states["/state1"].addChild(this.states["/state1/state0"]);
    this.states[""].fixTree();
    this.states[""].default_state = this.states["/state1"];
    this.states["/state0"].default_state = this.states["/state0/state1"];
    this.states["/state1"].default_state = this.states["/state1/state1"];
};

Class1.prototype.initializeStatechart = function() {
    // enter default state
    var states = this.states["/state1"].getEffectiveTargetStates();
    this.updateConfiguration(states);
    for (var state_idx in states) {
        if (!states.hasOwnProperty(state_idx)) continue;
        var state = states[state_idx]
        if (state.enter) {
            state.enter();
        }
    }
};

// add symbol 'Class1' to package 'TestCorrectDuplicateStateId'
TestCorrectDuplicateStateId.Class1 = Class1;

var ObjectManager = function(controller) {
    ObjectManagerBase.call(this, controller);
};
ObjectManager.prototype = new Object();
(function() {
    var proto = new ObjectManagerBase();
    for (prop in proto) {
        ObjectManager.prototype[prop] = proto[prop];
    }
})();

ObjectManager.prototype.instantiate = function(class_name, construct_params) {
    if (class_name === "Class1") {
        var instance = new Class1(this.controller);
        instance.associations = new Object();
    }
    return instance;
};

// add symbol 'ObjectManager' to package 'TestCorrectDuplicateStateId'
TestCorrectDuplicateStateId.ObjectManager = ObjectManager;

var Controller = function(event_loop_callbacks, finished_callback) {
    if (finished_callback === undefined) finished_callback = null;
    EventLoopControllerBase.call(this, new ObjectManager(this), event_loop_callbacks, finished_callback);
    this.object_manager.createInstance("Class1", new Array());
};
Controller.prototype = new Object();
(function() {
    var proto = new EventLoopControllerBase();
    for (prop in proto) {
        Controller.prototype[prop] = proto[prop];
    }
})();

// add symbol 'Controller' to package 'TestCorrectDuplicateStateId'
TestCorrectDuplicateStateId.Controller = Controller;

var InputEvent = function(name, port, parameters, time_offset) {
    this.name = name;
    this.port = port;
    this.parameters = parameters;
    this.time_offset = time_offset;
};

// add symbol 'InputEvent' to package 'TestCorrectDuplicateStateId'
TestCorrectDuplicateStateId.InputEvent = InputEvent;

var Test = function() {
};
Test.prototype.input_events = new Array();
Test.prototype.expected_events = new Array();

// add symbol 'Test' to package 'TestCorrectDuplicateStateId'
TestCorrectDuplicateStateId.Test = Test;
})();