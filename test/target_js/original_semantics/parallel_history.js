/* Generated by Statechart compiler by Glenn De Jonghe, Joeri Exelmans, Simon Van Mierlo, and Yentl Van Tendeloo (for the inspiration)

Date:   Mon Aug 08 09:49:20 2016

Model author: Glenn De Jonghe
Model name:   TestParallelHistory
Model description:
Testing history in parallel.*/


// package "TestParallelHistory"
var TestParallelHistory = {};
(function() {

var TestClass = function(controller) {
    RuntimeClassBase.call(this, controller);
    
    this.semantics.big_step_maximality = StatechartSemantics.TakeMany;
    this.semantics.internal_event_lifeline = StatechartSemantics.Queue;
    this.semantics.input_event_lifeline = StatechartSemantics.FirstComboStep;
    this.semantics.priority = StatechartSemantics.SourceParent;
    this.semantics.concurrency = StatechartSemantics.Single;
    
    // build Statechart structure
    this.build_statechart_structure();
    
    // call user defined constructor
    TestClass.prototype.user_defined_constructor.call(this);
};
TestClass.prototype = new Object();
(function() {
    var proto = new RuntimeClassBase();
    for (prop in proto) {
        TestClass.prototype[prop] = proto[prop];
    }
})();

TestClass.prototype.user_defined_constructor = function() {
};

TestClass.prototype.user_defined_destructor = function() {
};


// builds Statechart structure
TestClass.prototype.build_statechart_structure = function() {
    
    // state <root>
    this.states[""] = new State(0, this);
    
    // state /parallel
    this.states["/parallel"] = new ParallelState(1, this);
    
    // state /parallel/orthogonal_1
    this.states["/parallel/orthogonal_1"] = new State(2, this);
    
    // state /parallel/orthogonal_1/orthogonal_inner_1
    this.states["/parallel/orthogonal_1/orthogonal_inner_1"] = new State(3, this);
    
    // state /parallel/orthogonal_1/orthogonal_inner_1/state_1
    this.states["/parallel/orthogonal_1/orthogonal_inner_1/state_1"] = new State(4, this);
    this.states["/parallel/orthogonal_1/orthogonal_inner_1/state_1"].setEnter(this._parallel_orthogonal_1_orthogonal_inner_1_state_1_enter);
    
    // state /parallel/orthogonal_1/orthogonal_inner_1/state_2
    this.states["/parallel/orthogonal_1/orthogonal_inner_1/state_2"] = new State(5, this);
    this.states["/parallel/orthogonal_1/orthogonal_inner_1/state_2"].setEnter(this._parallel_orthogonal_1_orthogonal_inner_1_state_2_enter);
    
    // state /parallel/orthogonal_1/orthogonal_inner_1/history_1
    this.states["/parallel/orthogonal_1/orthogonal_inner_1/history_1"] = new ShallowHistoryState(6, this);
    
    // state /parallel/orthogonal_1/outer_1
    this.states["/parallel/orthogonal_1/outer_1"] = new State(7, this);
    this.states["/parallel/orthogonal_1/outer_1"].setEnter(this._parallel_orthogonal_1_outer_1_enter);
    
    // state /parallel/orthogonal_2
    this.states["/parallel/orthogonal_2"] = new State(8, this);
    
    // state /parallel/orthogonal_2/orthogonal_inner_2
    this.states["/parallel/orthogonal_2/orthogonal_inner_2"] = new State(9, this);
    
    // state /parallel/orthogonal_2/orthogonal_inner_2/state_3
    this.states["/parallel/orthogonal_2/orthogonal_inner_2/state_3"] = new State(10, this);
    this.states["/parallel/orthogonal_2/orthogonal_inner_2/state_3"].setEnter(this._parallel_orthogonal_2_orthogonal_inner_2_state_3_enter);
    
    // state /parallel/orthogonal_2/orthogonal_inner_2/state_4
    this.states["/parallel/orthogonal_2/orthogonal_inner_2/state_4"] = new State(11, this);
    this.states["/parallel/orthogonal_2/orthogonal_inner_2/state_4"].setEnter(this._parallel_orthogonal_2_orthogonal_inner_2_state_4_enter);
    
    // state /parallel/orthogonal_2/orthogonal_inner_2/history_2
    this.states["/parallel/orthogonal_2/orthogonal_inner_2/history_2"] = new ShallowHistoryState(12, this);
    
    // state /parallel/orthogonal_2/outer_2
    this.states["/parallel/orthogonal_2/outer_2"] = new State(13, this);
    this.states["/parallel/orthogonal_2/outer_2"].setEnter(this._parallel_orthogonal_2_outer_2_enter);
    
    // add children
    this.states[""].addChild(this.states["/parallel"]);
    this.states["/parallel"].addChild(this.states["/parallel/orthogonal_1"]);
    this.states["/parallel"].addChild(this.states["/parallel/orthogonal_2"]);
    this.states["/parallel/orthogonal_1"].addChild(this.states["/parallel/orthogonal_1/orthogonal_inner_1"]);
    this.states["/parallel/orthogonal_1"].addChild(this.states["/parallel/orthogonal_1/outer_1"]);
    this.states["/parallel/orthogonal_1/orthogonal_inner_1"].addChild(this.states["/parallel/orthogonal_1/orthogonal_inner_1/state_1"]);
    this.states["/parallel/orthogonal_1/orthogonal_inner_1"].addChild(this.states["/parallel/orthogonal_1/orthogonal_inner_1/state_2"]);
    this.states["/parallel/orthogonal_1/orthogonal_inner_1"].addChild(this.states["/parallel/orthogonal_1/orthogonal_inner_1/history_1"]);
    this.states["/parallel/orthogonal_2"].addChild(this.states["/parallel/orthogonal_2/orthogonal_inner_2"]);
    this.states["/parallel/orthogonal_2"].addChild(this.states["/parallel/orthogonal_2/outer_2"]);
    this.states["/parallel/orthogonal_2/orthogonal_inner_2"].addChild(this.states["/parallel/orthogonal_2/orthogonal_inner_2/state_3"]);
    this.states["/parallel/orthogonal_2/orthogonal_inner_2"].addChild(this.states["/parallel/orthogonal_2/orthogonal_inner_2/state_4"]);
    this.states["/parallel/orthogonal_2/orthogonal_inner_2"].addChild(this.states["/parallel/orthogonal_2/orthogonal_inner_2/history_2"]);
    this.states[""].fixTree();
    this.states[""].default_state = this.states["/parallel"];
    this.states["/parallel/orthogonal_1"].default_state = this.states["/parallel/orthogonal_1/orthogonal_inner_1"];
    this.states["/parallel/orthogonal_1/orthogonal_inner_1"].default_state = this.states["/parallel/orthogonal_1/orthogonal_inner_1/state_1"];
    this.states["/parallel/orthogonal_2"].default_state = this.states["/parallel/orthogonal_2/orthogonal_inner_2"];
    this.states["/parallel/orthogonal_2/orthogonal_inner_2"].default_state = this.states["/parallel/orthogonal_2/orthogonal_inner_2/state_3"];
    
    // transition /parallel/orthogonal_1/orthogonal_inner_1/state_1
    var _parallel_orthogonal_1_orthogonal_inner_1_state_1_0 = new Transition(this, this.states["/parallel/orthogonal_1/orthogonal_inner_1/state_1"], [this.states["/parallel/orthogonal_1/orthogonal_inner_1/state_2"]]);
    _parallel_orthogonal_1_orthogonal_inner_1_state_1_0.setTrigger(new Event("to_state_2", "test_input"));
    this.states["/parallel/orthogonal_1/orthogonal_inner_1/state_1"].addTransition(_parallel_orthogonal_1_orthogonal_inner_1_state_1_0);
    
    // transition /parallel/orthogonal_1/outer_1
    var _parallel_orthogonal_1_outer_1_0 = new Transition(this, this.states["/parallel/orthogonal_1/outer_1"], [this.states["/parallel/orthogonal_1/orthogonal_inner_1/history_1"]]);
    _parallel_orthogonal_1_outer_1_0.setTrigger(new Event("to_history_1", "test_input"));
    this.states["/parallel/orthogonal_1/outer_1"].addTransition(_parallel_orthogonal_1_outer_1_0);
    
    // transition /parallel/orthogonal_2/orthogonal_inner_2/state_3
    var _parallel_orthogonal_2_orthogonal_inner_2_state_3_0 = new Transition(this, this.states["/parallel/orthogonal_2/orthogonal_inner_2/state_3"], [this.states["/parallel/orthogonal_2/orthogonal_inner_2/state_4"]]);
    _parallel_orthogonal_2_orthogonal_inner_2_state_3_0.setTrigger(new Event("to_state_4", "test_input"));
    this.states["/parallel/orthogonal_2/orthogonal_inner_2/state_3"].addTransition(_parallel_orthogonal_2_orthogonal_inner_2_state_3_0);
    
    // transition /parallel/orthogonal_2/outer_2
    var _parallel_orthogonal_2_outer_2_0 = new Transition(this, this.states["/parallel/orthogonal_2/outer_2"], [this.states["/parallel/orthogonal_2/orthogonal_inner_2/history_2"]]);
    _parallel_orthogonal_2_outer_2_0.setTrigger(new Event("to_history_2", "test_input"));
    this.states["/parallel/orthogonal_2/outer_2"].addTransition(_parallel_orthogonal_2_outer_2_0);
    
    // transition /parallel/orthogonal_1/orthogonal_inner_1
    var _parallel_orthogonal_1_orthogonal_inner_1_0 = new Transition(this, this.states["/parallel/orthogonal_1/orthogonal_inner_1"], [this.states["/parallel/orthogonal_1/outer_1"]]);
    _parallel_orthogonal_1_orthogonal_inner_1_0.setTrigger(new Event("to_outer_1", "test_input"));
    this.states["/parallel/orthogonal_1/orthogonal_inner_1"].addTransition(_parallel_orthogonal_1_orthogonal_inner_1_0);
    
    // transition /parallel/orthogonal_2/orthogonal_inner_2
    var _parallel_orthogonal_2_orthogonal_inner_2_0 = new Transition(this, this.states["/parallel/orthogonal_2/orthogonal_inner_2"], [this.states["/parallel/orthogonal_2/outer_2"]]);
    _parallel_orthogonal_2_orthogonal_inner_2_0.setTrigger(new Event("to_outer_2", "test_input"));
    this.states["/parallel/orthogonal_2/orthogonal_inner_2"].addTransition(_parallel_orthogonal_2_orthogonal_inner_2_0);
};

TestClass.prototype._parallel_orthogonal_1_orthogonal_inner_1_state_1_enter = function() {
    this.big_step.outputEvent(new Event("in_state_1", "test_output", new Array()));
};

TestClass.prototype._parallel_orthogonal_1_orthogonal_inner_1_state_2_enter = function() {
    this.big_step.outputEvent(new Event("in_state_2", "test_output", new Array()));
};

TestClass.prototype._parallel_orthogonal_1_outer_1_enter = function() {
    this.big_step.outputEvent(new Event("in_outer_1", "test_output", new Array()));
};

TestClass.prototype._parallel_orthogonal_2_orthogonal_inner_2_state_3_enter = function() {
    this.big_step.outputEvent(new Event("in_state_3", "test_output", new Array()));
};

TestClass.prototype._parallel_orthogonal_2_orthogonal_inner_2_state_4_enter = function() {
    this.big_step.outputEvent(new Event("in_state_4", "test_output", new Array()));
};

TestClass.prototype._parallel_orthogonal_2_outer_2_enter = function() {
    this.big_step.outputEvent(new Event("in_outer_2", "test_output", new Array()));
};

TestClass.prototype.initializeStatechart = function() {
    // enter default state
    var states = this.states["/parallel"].getEffectiveTargetStates();
    this.updateConfiguration(states);
    for (var state_idx in states) {
        if (!states.hasOwnProperty(state_idx)) continue;
        var state = states[state_idx]
        if (state.enter) {
            state.enter();
        }
    }
};

// add symbol 'TestClass' to package 'TestParallelHistory'
TestParallelHistory.TestClass = TestClass;

var ObjectManager = function(controller) {
    ObjectManagerBase.call(this, controller);
};
ObjectManager.prototype = new Object();
(function() {
    var proto = new ObjectManagerBase();
    for (prop in proto) {
        ObjectManager.prototype[prop] = proto[prop];
    }
})();

ObjectManager.prototype.instantiate = function(class_name, construct_params) {
    if (class_name === "TestClass") {
        var instance = new TestClass(this.controller);
        instance.associations = new Object();
    } else  {
        throw new Error("Cannot instantiate class " + class_name);
    }
    return instance;
};

// add symbol 'ObjectManager' to package 'TestParallelHistory'
TestParallelHistory.ObjectManager = ObjectManager;

var Controller = function(event_loop_callbacks, finished_callback, behind_schedule_callback) {
    if (finished_callback === undefined) finished_callback = null;
    if (behind_schedule_callback === undefined) behind_schedule_callback = null;
    EventLoopControllerBase.call(this, new ObjectManager(this), event_loop_callbacks, finished_callback, behind_schedule_callback);
    this.addInputPort("test_input");
    this.addOutputPort("test_output");
    this.object_manager.createInstance("TestClass", new Array());
};
Controller.prototype = new Object();
(function() {
    var proto = new EventLoopControllerBase();
    for (prop in proto) {
        Controller.prototype[prop] = proto[prop];
    }
})();

// add symbol 'Controller' to package 'TestParallelHistory'
TestParallelHistory.Controller = Controller;

var InputEvent = function(name, port, parameters, time_offset) {
    this.name = name;
    this.port = port;
    this.parameters = parameters;
    this.time_offset = time_offset;
};

// add symbol 'InputEvent' to package 'TestParallelHistory'
TestParallelHistory.InputEvent = InputEvent;

var Test = function() {
};
Test.prototype.input_events = [new InputEvent("to_state_2", "test_input", new Array(), 0.0), new InputEvent("to_state_4", "test_input", new Array(), 0.0), new InputEvent("to_outer_1", "test_input", new Array(), 0.0), new InputEvent("to_outer_2", "test_input", new Array(), 0.0), new InputEvent("to_history_1", "test_input", new Array(), 0.0), new InputEvent("to_history_2", "test_input", new Array(), 0.0)];
Test.prototype.expected_events = [[new Event("in_state_1", "test_output", new Array()), new Event("in_state_3", "test_output", new Array())], [new Event("in_state_2", "test_output", new Array())], [new Event("in_state_4", "test_output", new Array())], [new Event("in_outer_1", "test_output", new Array())], [new Event("in_outer_2", "test_output", new Array())], [new Event("in_state_2", "test_output", new Array())], [new Event("in_state_4", "test_output", new Array())]];

// add symbol 'Test' to package 'TestParallelHistory'
TestParallelHistory.Test = Test;
})();